package com.weedow.searchy.expression.parser

import org.antlr.v4.runtime.RecognitionException
import org.antlr.v4.runtime.Recognizer

/**
 * Data class representing an Expression Parser error.
 *
 * @param recognizer What parser got the error. From this object, you can access the context as well as the input stream.
 * @param offendingSymbol The offending token in the input token stream, unless recognizer is a lexer (then it's null).
 * If no viable alternative error, e has token at which we started production for the decision.
 * @param line The line number in the input where the error occurred.
 * @param charPositionInLine The character position within that line where the error occurred.
 * @param message The message to emit.
 * @param exception The exception generated by the parser that led to the reporting of an error. It is null in the case where the parser was able to
 * recover in line without exiting the surrounding rule.
 */
data class SyntaxError(
    val recognizer: Recognizer<*, *>,
    var offendingSymbol: Any,
    val line: Int,
    val charPositionInLine: Int,
    val message: String,
    val exception: RecognitionException
)